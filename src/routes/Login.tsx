import {
  Box,
  Button,
  Input as ChakraInput,
  FormControl,
  FormHelperText,
  FormLabel,
  InputProps,
  Text,
} from "@chakra-ui/react"
import { forwardRef, useRef } from "react"

import { NavLink } from "react-router-dom"
import { Props } from "../components"

const Input: React.FC<any> = forwardRef((props, ref) => {
  return <ChakraInput bgColor="white" ref={ref} {...props} />
})

const FormField: React.FC<Props> = ({ children, ...props }) => {
  return (
    <FormControl mt="4" {...props}>
      {children}
    </FormControl>
  )
}

const challenge = [
  45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 82, 83, 65, 32, 80, 82, 73, 86, 65,
  84, 69, 32, 75, 69, 89, 45, 45, 45, 45, 45, 13, 10,
]

export function Login() {
  const usernameEmail = useRef<HTMLInputElement | undefined>()
  const password = useRef<HTMLInputElement | undefined>()

  const handleSubmit: React.FormEventHandler<HTMLFormElement> | undefined = (
    event
  ) => {
    event.preventDefault()
    const options = {
      method: "POST",
      mode: "no-cors",
      body: new FormData(event.currentTarget),
      //   credentials: "include",
      //   body: JSON.stringify({
      //     email: usernameEmail.current?.value,
      //     password: password.current?.value,
      //   }),
      headers: {
        Accept: "application/json",
        Authorization: "Basic bGFzc2VBYWtqYWVyOnNlY3JldFBhc3N3b3Jk",
        "Content-Type": "application/json",
      },
    }

    console.log("options: ", options)
    fetch(`http://127.0.0.1:5000/authorize/login`, options).then(console.log)
    // .then((res) => res.())
  }

  // https://www.w3.org/TR/webauthn/#sctn-sample-scenarios
  const publicKey: PublicKeyCredentialCreationOptions = {
    challenge: /* random bytes generated by the server */ new Uint8Array(
      challenge
    ),
    rp: /* relying party */ {
      name: "Lasse Aakjær",
      id: "lasseaakjaer.com",
    },
    user: {
      id: Uint8Array.from(
        window.atob("MIIBkzCCATigAwIBAjCCAZMwggE4oAMCAQIwggGTMII="),
        (c) => c.charCodeAt(0)
      ),
      name: "alex.mueller@example.com",
      displayName: "Alex Müller",
    },
    pubKeyCredParams: [
      {
        type: "public-key",
        alg: -7, // "ES256" as registered in the IANA COSE Algorithms registry
      },
      {
        type: "public-key",
        alg: -257, // Value registered by this specification for "RS256"
      },
    ],
    authenticatorSelection: {
      /*  https://w3c.github.io/webauthn/#dom-authenticatorselectioncriteria-userverification
        This enumeration’s values describe authenticators' attachment modalities. 
        Relying Parties use this to express a preferred authenticator attachment modality when calling navigator.credentials.create() to create a credential, 
        and clients use this to report the authenticator attachment modality used to complete a registration or authentication ceremony. 
      */
      // Try to use UV (User verification) if possible. This is also the default.
      userVerification: "preferred" /*   "cross-platform" */,
      /*   Authenticator Attachment Modality
      A platform authenticator is attached using a client device-specific transport, called platform attachment, and is usually not removable from the client device. 
      A public key credential bound to a platform authenticator is called a platform credential.

      A roaming authenticator is attached using cross-platform transports, called cross-platform attachment. 
      Authenticators of this class are removable from, and can "roam" between, client devices. 
      A public key credential bound to a roaming authenticator is called a roaming credential. 
      */
    },
    timeout: 360000, // 6 minutes
    excludeCredentials: [
      // Don’t re-register any authenticator that has one of these credentials
      {
        id: Uint8Array.from(
          window.atob("ufJWp8YGlibm1Kd9XQBWN1WAw2jy5In2Xhon9HAqcXE="),
          (c) => c.charCodeAt(0)
        ),
        type: "public-key",
      },
      {
        id: Uint8Array.from(
          window.atob("E/e1dhZc++mIsz4f9hb6NifAzJpF1V4mEtRlIPBiWdY="),
          (c) => c.charCodeAt(0)
        ),
        type: "public-key",
      },
    ],

    // Make excludeCredentials check backwards compatible with credentials registered with U2F
    extensions: { appidExclude: "https://acme.example.com" },
  }

  const webAuth = () => {
    navigator.credentials
      .create({ publicKey })
      .then((newCredentialInfo) => {
        console.log("newCredentialInfo: ", newCredentialInfo)
        // Send new credential info to server for verification and registration.
        const response = newCredentialInfo.response
        console.log("response: ", response)
        const clientExtensionsResults =
          newCredentialInfo.getClientExtensionResults()
      })
      .catch((err) => {
        // No acceptable authenticator or user refused consent. Handle appropriately.
        console.error(err)
      })
  }

  return (
    <Box p="4" w="md" bg="gray.100" borderRadius="8">
      <Button
        onClick={webAuth}
        colorScheme="green"
        type="button"
        mt="4"
        w="full"
      >
        SignUp
      </Button>
      <form onSubmit={handleSubmit}>
        <Text fontSize="xl" fontWeight="medium">
          Login Form
        </Text>
        <FormField>
          <FormLabel>Username / Email</FormLabel>
          <Input
            ref={usernameEmail}
            type="text"
            placeholder="JohnDoe / john-doe@gmail.com.."
            autoComplete="username"
          />
        </FormField>
        <FormField>
          <FormLabel>Password</FormLabel>
          <Input
            ref={password}
            type="password"
            autoComplete="current-password"
          />
        </FormField>
        <Button colorScheme="blue" type="submit" mt="8" w="full">
          Login
        </Button>
        <NavLink to="/register">
          <Button
            colorScheme="blue"
            variant="outline"
            type="button"
            mt="4"
            w="full"
          >
            SignUp
          </Button>
        </NavLink>
      </form>
    </Box>
  )
}

export function SignUp() {
  const username = useRef<HTMLInputElement | undefined>()
  const password = useRef<HTMLInputElement | undefined>()
  const email = useRef<HTMLInputElement | undefined>()

  const handleSubmit: React.FormEventHandler<HTMLFormElement> | undefined = (
    event
  ) => {
    event.preventDefault()

    fetch(`http://127.0.0.1:5000/create/user`, {
      method: "POST",
      body: JSON.stringify({
        username: username.current?.value,
        password: password.current?.value,
        email: email.current?.value,
      }),
      headers: {
        "Content-Type": "application/json",
      },
    })
      .then((res) => res.json())
      .then(console.log)
  }

  return (
    <Box p="4" w="md" bg="gray.100" borderRadius="8">
      <form onSubmit={handleSubmit}>
        <Text fontSize="xl" fontWeight="medium">
          Sign Up Form
        </Text>
        <FormField>
          <FormLabel>Username</FormLabel>
          <Input type="text" ref={username} placeholder="John Doe" />
          <FormHelperText>What do you what to be called?</FormHelperText>
        </FormField>
        <FormField>
          <FormLabel>Email</FormLabel>
          <Input type="email" ref={email} placeholder="john-doe@gmail.com" />
          <FormHelperText>We'll never share your email.</FormHelperText>
        </FormField>
        <FormField>
          <FormLabel>Password</FormLabel>
          <Input type="password" ref={password} />
          <FormHelperText>
            Password has to be at least 8 characters long and have both numbers
            and letters
          </FormHelperText>
        </FormField>
        <FormField>
          <FormLabel>Re-Password</FormLabel>
          <Input type="password" />
          <FormHelperText>Confirm your password</FormHelperText>
        </FormField>
        <Button colorScheme="blue" type="submit" mt="8" w="full">
          Register Account
        </Button>
      </form>
    </Box>
  )
}
